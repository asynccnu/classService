// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.26.1
// source: classService/v1/classService.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClassServiceAddClassByHand = "/classService.v1.ClassService/AddClassByHand"
const OperationClassServiceAddClassBySearch = "/classService.v1.ClassService/AddClassBySearch"
const OperationClassServiceSearchClass = "/classService.v1.ClassService/SearchClass"

type ClassServiceHTTPServer interface {
	AddClassByHand(context.Context, *AddClassByHandRequest) (*AddClassByHandReply, error)
	AddClassBySearch(context.Context, *AddClassBySearchRequest) (*AddClassBySearchReply, error)
	// SearchClass Sends a greeting
	SearchClass(context.Context, *SearchRequest) (*SearchReply, error)
}

func RegisterClassServiceHTTPServer(s *http.Server, srv ClassServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/classService/search/{searchKeyWords}", _ClassService_SearchClass0_HTTP_Handler(srv))
	r.POST("/classService/addByHand", _ClassService_AddClassByHand0_HTTP_Handler(srv))
	r.POST("/classService/addBySearch", _ClassService_AddClassBySearch0_HTTP_Handler(srv))
}

func _ClassService_SearchClass0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceSearchClass)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchClass(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_AddClassByHand0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddClassByHandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceAddClassByHand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddClassByHand(ctx, req.(*AddClassByHandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddClassByHandReply)
		return ctx.Result(200, reply)
	}
}

func _ClassService_AddClassBySearch0_HTTP_Handler(srv ClassServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddClassBySearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClassServiceAddClassBySearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddClassBySearch(ctx, req.(*AddClassBySearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddClassBySearchReply)
		return ctx.Result(200, reply)
	}
}

type ClassServiceHTTPClient interface {
	AddClassByHand(ctx context.Context, req *AddClassByHandRequest, opts ...http.CallOption) (rsp *AddClassByHandReply, err error)
	AddClassBySearch(ctx context.Context, req *AddClassBySearchRequest, opts ...http.CallOption) (rsp *AddClassBySearchReply, err error)
	SearchClass(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *SearchReply, err error)
}

type ClassServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewClassServiceHTTPClient(client *http.Client) ClassServiceHTTPClient {
	return &ClassServiceHTTPClientImpl{client}
}

func (c *ClassServiceHTTPClientImpl) AddClassByHand(ctx context.Context, in *AddClassByHandRequest, opts ...http.CallOption) (*AddClassByHandReply, error) {
	var out AddClassByHandReply
	pattern := "/classService/addByHand"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceAddClassByHand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) AddClassBySearch(ctx context.Context, in *AddClassBySearchRequest, opts ...http.CallOption) (*AddClassBySearchReply, error) {
	var out AddClassBySearchReply
	pattern := "/classService/addBySearch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClassServiceAddClassBySearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClassServiceHTTPClientImpl) SearchClass(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*SearchReply, error) {
	var out SearchReply
	pattern := "/classService/search/{searchKeyWords}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClassServiceSearchClass))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
