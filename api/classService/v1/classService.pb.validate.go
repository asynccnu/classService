// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/classService/v1/classService.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SearchRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchRequestMultiError, or
// nil if none found.
func (m *SearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SearchKeyWords

	if len(errors) > 0 {
		return SearchRequestMultiError(errors)
	}

	return nil
}

// SearchRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRequestMultiError) AllErrors() []error { return m }

// SearchRequestValidationError is the validation error returned by
// SearchRequest.Validate if the designated constraints aren't met.
type SearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRequestValidationError) ErrorName() string { return "SearchRequestValidationError" }

// Error satisfies the builtin error interface
func (e SearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRequestValidationError{}

// Validate checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchReplyMultiError, or
// nil if none found.
func (m *SearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClassInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("ClassInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchReplyValidationError{
						field:  fmt.Sprintf("ClassInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchReplyValidationError{
					field:  fmt.Sprintf("ClassInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchReplyMultiError(errors)
	}

	return nil
}

// SearchReplyMultiError is an error wrapping multiple validation errors
// returned by SearchReply.ValidateAll() if the designated constraints aren't met.
type SearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchReplyMultiError) AllErrors() []error { return m }

// SearchReplyValidationError is the validation error returned by
// SearchReply.Validate if the designated constraints aren't met.
type SearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchReplyValidationError) ErrorName() string { return "SearchReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchReplyValidationError{}

// Validate checks the field values on AddClassByHandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddClassByHandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClassByHandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClassByHandRequestMultiError, or nil if none found.
func (m *AddClassByHandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClassByHandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStuId()) != 10 {
		err := AddClassByHandRequestValidationError{
			field:  "StuId",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddClassByHandRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDurClass()) < 1 {
		err := AddClassByHandRequestValidationError{
			field:  "DurClass",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWhere()) < 1 {
		err := AddClassByHandRequestValidationError{
			field:  "Where",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTeacher()) < 1 {
		err := AddClassByHandRequestValidationError{
			field:  "Teacher",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeeks() <= 0 {
		err := AddClassByHandRequestValidationError{
			field:  "Weeks",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSemester()) != 1 {
		err := AddClassByHandRequestValidationError{
			field:  "Semester",
			reason: "value length must be 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if utf8.RuneCountInString(m.GetYear()) < 1 {
		err := AddClassByHandRequestValidationError{
			field:  "Year",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDay(); val < 1 || val > 7 {
		err := AddClassByHandRequestValidationError{
			field:  "Day",
			reason: "value must be inside range [1, 7]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Credit

	if len(errors) > 0 {
		return AddClassByHandRequestMultiError(errors)
	}

	return nil
}

// AddClassByHandRequestMultiError is an error wrapping multiple validation
// errors returned by AddClassByHandRequest.ValidateAll() if the designated
// constraints aren't met.
type AddClassByHandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClassByHandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClassByHandRequestMultiError) AllErrors() []error { return m }

// AddClassByHandRequestValidationError is the validation error returned by
// AddClassByHandRequest.Validate if the designated constraints aren't met.
type AddClassByHandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClassByHandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClassByHandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClassByHandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClassByHandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClassByHandRequestValidationError) ErrorName() string {
	return "AddClassByHandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddClassByHandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClassByHandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClassByHandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClassByHandRequestValidationError{}

// Validate checks the field values on AddClassByHandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddClassByHandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClassByHandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClassByHandReplyMultiError, or nil if none found.
func (m *AddClassByHandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClassByHandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Msg

	if len(errors) > 0 {
		return AddClassByHandReplyMultiError(errors)
	}

	return nil
}

// AddClassByHandReplyMultiError is an error wrapping multiple validation
// errors returned by AddClassByHandReply.ValidateAll() if the designated
// constraints aren't met.
type AddClassByHandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClassByHandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClassByHandReplyMultiError) AllErrors() []error { return m }

// AddClassByHandReplyValidationError is the validation error returned by
// AddClassByHandReply.Validate if the designated constraints aren't met.
type AddClassByHandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClassByHandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClassByHandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClassByHandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClassByHandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClassByHandReplyValidationError) ErrorName() string {
	return "AddClassByHandReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddClassByHandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClassByHandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClassByHandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClassByHandReplyValidationError{}

// Validate checks the field values on AddClassBySearchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddClassBySearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClassBySearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClassBySearchRequestMultiError, or nil if none found.
func (m *AddClassBySearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClassBySearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClassInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddClassBySearchRequestValidationError{
					field:  "ClassInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddClassBySearchRequestValidationError{
					field:  "ClassInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddClassBySearchRequestValidationError{
				field:  "ClassInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddClassBySearchRequestMultiError(errors)
	}

	return nil
}

// AddClassBySearchRequestMultiError is an error wrapping multiple validation
// errors returned by AddClassBySearchRequest.ValidateAll() if the designated
// constraints aren't met.
type AddClassBySearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClassBySearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClassBySearchRequestMultiError) AllErrors() []error { return m }

// AddClassBySearchRequestValidationError is the validation error returned by
// AddClassBySearchRequest.Validate if the designated constraints aren't met.
type AddClassBySearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClassBySearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClassBySearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClassBySearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClassBySearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClassBySearchRequestValidationError) ErrorName() string {
	return "AddClassBySearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddClassBySearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClassBySearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClassBySearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClassBySearchRequestValidationError{}

// Validate checks the field values on AddClassBySearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddClassBySearchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddClassBySearchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddClassBySearchReplyMultiError, or nil if none found.
func (m *AddClassBySearchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddClassBySearchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Msg

	if len(errors) > 0 {
		return AddClassBySearchReplyMultiError(errors)
	}

	return nil
}

// AddClassBySearchReplyMultiError is an error wrapping multiple validation
// errors returned by AddClassBySearchReply.ValidateAll() if the designated
// constraints aren't met.
type AddClassBySearchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddClassBySearchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddClassBySearchReplyMultiError) AllErrors() []error { return m }

// AddClassBySearchReplyValidationError is the validation error returned by
// AddClassBySearchReply.Validate if the designated constraints aren't met.
type AddClassBySearchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddClassBySearchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddClassBySearchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddClassBySearchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddClassBySearchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddClassBySearchReplyValidationError) ErrorName() string {
	return "AddClassBySearchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddClassBySearchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddClassBySearchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddClassBySearchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddClassBySearchReplyValidationError{}

// Validate checks the field values on ClassInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClassInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClassInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClassInfoMultiError, or nil
// if none found.
func (m *ClassInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClassInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	// no validation rules for Teacher

	// no validation rules for Where

	// no validation rules for ClassWhen

	// no validation rules for WeekDuration

	// no validation rules for Classname

	// no validation rules for Credit

	// no validation rules for Weeks

	// no validation rules for Semester

	// no validation rules for Year

	// no validation rules for Id

	if len(errors) > 0 {
		return ClassInfoMultiError(errors)
	}

	return nil
}

// ClassInfoMultiError is an error wrapping multiple validation errors returned
// by ClassInfo.ValidateAll() if the designated constraints aren't met.
type ClassInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClassInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClassInfoMultiError) AllErrors() []error { return m }

// ClassInfoValidationError is the validation error returned by
// ClassInfo.Validate if the designated constraints aren't met.
type ClassInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassInfoValidationError) ErrorName() string { return "ClassInfoValidationError" }

// Error satisfies the builtin error interface
func (e ClassInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassInfoValidationError{}
